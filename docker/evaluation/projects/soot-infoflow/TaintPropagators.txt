#Packages considered part of Library
^android
^com.android
^com.google.android
#Packages for SecuriBench
^javax.servlet.http

<java.lang.Object: java.lang.String toString()>
<java.lang.StringBuilder: void <init>(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>

<java.lang.StringBuffer: void <init>(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(double)>
<java.lang.StringBuffer: java.lang.StringBuffer append(float)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>

<java.lang.String: void <init>(byte[])>
<java.lang.String: void <init>(byte[],int,int)>
<java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<java.lang.String: void <init>(byte[],java.lang.String)>
<java.lang.String: void <init>(char[])>
<java.lang.String: void <init>(char[],int,int)>
<java.lang.String: void <init>(int[],int,int)>
<java.lang.String: void <init>(java.lang.String)>
<java.lang.String: void <init>(java.lang.StringBuffer)>
<java.lang.String: void <init>(java.lang.StringBuilder)>

<java.lang.String: java.lang.String valueOf(boolean)>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: java.lang.String valueOf(char[])>
<java.lang.String: java.lang.String valueOf(char[],int,int)>
<java.lang.String: java.lang.String valueOf(double)>
<java.lang.String: java.lang.String valueOf(float)>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: java.lang.String valueOf(long)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>

<java.lang.String: char[] toCharArray()>
#<java.lang.String: int length()>
<java.lang.String: char charAt(int)>
<java.lang.String: int codePointAt(int)>
<java.lang.String: int codePointBefore(int)>
#<java.lang.String: int codePointCount(int,int)>
# Mark methods like these
#<java.lang.String: void getChars(int,int,char[],int)
#<java.lang.String: void getBytes(int,int,byte[],int)
<java.lang.String: byte[] getBytes(java.lang.String)>
<java.lang.String: byte[] getBytes(java.nio.charset.Charset>
<java.lang.String: byte[] getBytes()>
#<java.lang.String: int indexOf(int ch)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.CharSequence subSequence(int,int)>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: java.lang.String replace(char,char)>
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<java.lang.String: java.lang.String[] split(java.lang.String)>
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.lang.String: java.lang.String toUpperCase()>
<java.lang.String: java.lang.String trim()>
<java.lang.String: java.lang.String format(java.lang.String,Object[])>
<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,Object[])>
<java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<java.lang.String: java.lang.String copyValueOf(char[])>

<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>

<java.lang.Byte: void <init>(byte)>
<java.lang.Byte: void <init>(java.lang.String)>
<java.lang.Byte: java.lang.Byte valueOf(byte)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>
<java.lang.Byte: long parseByte(java.lang.String)>
<java.lang.Byte: long parseByte(java.lang.String,int)>
<java.lang.Byte: java.lang.String toString(byte)>
<java.lang.Byte: java.lang.Byte decode(java.lang.String)>

<java.lang.Integer: java.lang.String toBinaryString(int)>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.lang.Integer: java.lang.String toOctalString(int)>
<java.lang.Integer: void <init>(int)>
<java.lang.Integer: void <init>(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer toString(int)>
<java.lang.Integer: java.lang.Integer toString(int,int)>
<java.lang.Integer: java.lang.String toUnsignedString(int,int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>
<java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<java.lang.Integer: int highestOneBit(int)>
<java.lang.Integer: int lowestOneBit(int)>
<java.lang.Integer: int numberOfLeadingZeros(int)>
<java.lang.Integer: int numberOfTrailingZeros(int)>
<java.lang.Integer: int bitCount(int)>
<java.lang.Integer: int rotateLeft(int,int)>
<java.lang.Integer: int rotateRight(int,int)>
<java.lang.Integer: int reverse(int)>
<java.lang.Integer: int signum(int)>
<java.lang.Integer: int reverseBytes(int)>

<java.lang.Short: java.lang.String toString(short)>
<java.lang.Short: java.lang.Short valueOf(short)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>
<java.lang.Short: long parseShort(java.lang.String)>
<java.lang.Short: long parseShort(java.lang.String,int)>
<java.lang.Short: java.lang.Short decode(java.lang.String)>
<java.lang.Short: short reverseBytes(short)>

<java.lang.Long: void <init>(long)>
<java.lang.Long: void <init>(java.lang.String)>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.Long: long parseLong(java.lang.String,int)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>
<java.lang.Long: java.lang.String toString(long)>
<java.lang.Long: java.lang.String toString(long,int)>
<java.lang.Long: java.lang.String toHexString(long)>
<java.lang.Long: java.lang.String toOctalString(long)>
<java.lang.Long: java.lang.String toBinaryString(long)>
<java.lang.Long: java.lang.Long decode(java.lang.String)>
<java.lang.Long: java.lang.Long getLong(java.lang.String)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>
<java.lang.Long: long highestOneBit(long)>
<java.lang.Long: long lowestOneBit(long)>
<java.lang.Long: long numberOfLeadingZeros(long)>
<java.lang.Long: long numberOfTrailingZeros(long)>
<java.lang.Long: long bitCount(long)>
<java.lang.Long: long rotateLeft(long,int)>
<java.lang.Long: long rotateRight(long,int)>
<java.lang.Long: long reverse(long)>
<java.lang.Long: int signum(long)>
<java.lang.Long: long reverseBytes(long)>

<java.lang.Float: void <init>(float)>
<java.lang.Float: void <init>(java.lang.String)>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.lang.Float: java.lang.Float valueOf(float)>
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.lang.Float: java.lang.String toString(float)>
<java.lang.Float: java.lang.String toHexString(float)>
<java.lang.Float: int floatToIntBits(float)>
<java.lang.Float: java.lang.String toString(float)>

<java.lang.Double: void <init>(double)>
<java.lang.Double: void <init>(java.lang.String)>
<java.lang.Double: double parseDouble(java.lang.String)>
<java.lang.Double: java.lang.Double valueOf(double)>
<java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<java.lang.Double: java.lang.String toString(double)>
<java.lang.Double: java.lang.String toHexString(double)>
<java.lang.Double: int doubleToIntBits(double)>

<java.lang.Boolean: void <init>(boolean)>
<java.lang.Boolean: void <init>(java.lang.String)>

<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<java.lang.Boolean: java.lang.String toString(boolean)>
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>

<java.lang.Character: void <init>(char)>
<java.lang.Character: java.lang.Boolean valueOf(char)>
<java.lang.Character: char forDigit(int,int)>

<java.util.Collection: int size()>
<java.util.Collection: boolean isEmpty()>
<java.util.Collection: boolean contains(java.lang.Object)>
<java.util.Collection: java.lang.Object[] toArray()>
<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.Collection: boolean add(java.lang.Object)>
<java.util.Collection: boolean remove(java.lang.Object)>
<java.util.Collection: boolean containsAll(java.util.Collection)>
<java.util.Collection: boolean addAll(java.util.Collection)>
<java.util.Collection: boolean removeAll(java.util.Collection)>
<java.util.Collection: boolean retainAll(java.util.Collection)>

<java.util.Iterable: java.util.Iterator iterator()>
<java.util.Map: int size()>
<java.util.Map: boolean isEmpty()>
<java.util.Map: boolean containsKey(java.lang.Object)>
<java.util.Map: boolean containsValue(java.lang.Object)>
<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Map: java.lang.Object remove(java.lang.Object)>
<java.util.Map: void putAll(java.util.Map)>
<java.util.Map: java.util.Set keySet()>
<java.util.Map: java.util.Collection values()>
<java.util.Map: java.util.Set entrySet()>
<java.util.Map$Entry: java.lang.Object getKey()>
<java.util.Map$Entry: java.lang.Object getValue()>
<java.util.Map$Entry: java.lang.Object setValue()>

<java.util.List: java.lang.Object get(int)>
<java.util.Deque: void addLast(java.lang.Object)>
<java.util.Deque: java.lang.Object getLast()>

<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>


<java.util.StringTokenizer: void <init>(java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>
<java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>
<java.util.StringTokenizer: java.lang.Object nextElement()>
<java.util.StringTokenizer: boolean hasMoreElements()>
<java.util.StringTokenizer: int countTokens()>


<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>
<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>